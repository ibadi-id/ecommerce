// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name      string
	Email     string
	Phone     string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	OrderIDs  []int
}

// Mutate applies the CreateCustomerInput on the CustomerCreate builder.
func (i *CreateCustomerInput) Mutate(m *CustomerCreate) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	m.SetPhone(i.Phone)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.OrderIDs; len(ids) > 0 {
		m.AddOrderIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the create builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c)
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	ID             int
	Name           *string
	Email          *string
	Phone          *string
	AddOrderIDs    []int
	RemoveOrderIDs []int
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if ids := i.AddOrderIDs; len(ids) > 0 {
		m.AddOrderIDs(ids...)
	}
	if ids := i.RemoveOrderIDs; len(ids) > 0 {
		m.RemoveOrderIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the update builder.
func (u *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCustomerInput on the update-one builder.
func (u *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	ShippingAddress string
	Amount          int
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	CustomerID      *int
	ItemIDs         []int
}

// Mutate applies the CreateOrderInput on the OrderCreate builder.
func (i *CreateOrderInput) Mutate(m *OrderCreate) {
	m.SetShippingAddress(i.ShippingAddress)
	m.SetAmount(i.Amount)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if ids := i.ItemIDs; len(ids) > 0 {
		m.AddItemIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the create builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c)
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	ID              int
	ShippingAddress *string
	Amount          *int
	CustomerID      *int
	ClearCustomer   bool
	AddItemIDs      []int
	RemoveItemIDs   []int
}

// Mutate applies the UpdateOrderInput on the OrderMutation.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.ShippingAddress; v != nil {
		m.SetShippingAddress(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if i.ClearCustomer {
		m.ClearCustomer()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if ids := i.AddItemIDs; len(ids) > 0 {
		m.AddItemIDs(ids...)
	}
	if ids := i.RemoveItemIDs; len(ids) > 0 {
		m.RemoveItemIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the update builder.
func (u *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrderInput on the update-one builder.
func (u *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrderItemInput represents a mutation input for creating orderitems.
type CreateOrderItemInput struct {
	Quantity  int
	CreatedAt *time.Time
	UpdatedAt *time.Time
	OrderID   *int
	ProductID *int
}

// Mutate applies the CreateOrderItemInput on the OrderItemCreate builder.
func (i *CreateOrderItemInput) Mutate(m *OrderItemCreate) {
	m.SetQuantity(i.Quantity)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the CreateOrderItemInput on the create builder.
func (c *OrderItemCreate) SetInput(i CreateOrderItemInput) *OrderItemCreate {
	i.Mutate(c)
	return c
}

// UpdateOrderItemInput represents a mutation input for updating orderitems.
type UpdateOrderItemInput struct {
	ID           int
	Quantity     *int
	OrderID      *int
	ClearOrder   bool
	ProductID    *int
	ClearProduct bool
}

// Mutate applies the UpdateOrderItemInput on the OrderItemMutation.
func (i *UpdateOrderItemInput) Mutate(m *OrderItemMutation) {
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if i.ClearOrder {
		m.ClearOrder()
	}
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if i.ClearProduct {
		m.ClearProduct()
	}
	if v := i.ProductID; v != nil {
		m.SetProductID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrderItemInput on the update builder.
func (u *OrderItemUpdate) SetInput(i UpdateOrderItemInput) *OrderItemUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrderItemInput on the update-one builder.
func (u *OrderItemUpdateOne) SetInput(i UpdateOrderItemInput) *OrderItemUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	Name         string
	Descriptions string
	Sku          string
	Price        int
	Stock        int
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	OrderItemIDs []int
}

// Mutate applies the CreateProductInput on the ProductCreate builder.
func (i *CreateProductInput) Mutate(m *ProductCreate) {
	m.SetName(i.Name)
	m.SetDescriptions(i.Descriptions)
	m.SetSku(i.Sku)
	m.SetPrice(i.Price)
	m.SetStock(i.Stock)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.OrderItemIDs; len(ids) > 0 {
		m.AddOrderItemIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateProductInput on the create builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c)
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	ID                 int
	Name               *string
	Descriptions       *string
	Sku                *string
	Price              *int
	Stock              *int
	AddOrderItemIDs    []int
	RemoveOrderItemIDs []int
}

// Mutate applies the UpdateProductInput on the ProductMutation.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Descriptions; v != nil {
		m.SetDescriptions(*v)
	}
	if v := i.Sku; v != nil {
		m.SetSku(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.Stock; v != nil {
		m.SetStock(*v)
	}
	if ids := i.AddOrderItemIDs; len(ids) > 0 {
		m.AddOrderItemIDs(ids...)
	}
	if ids := i.RemoveOrderItemIDs; len(ids) > 0 {
		m.RemoveOrderItemIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the update builder.
func (u *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProductInput on the update-one builder.
func (u *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
