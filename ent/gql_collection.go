// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) *CustomerQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CustomerQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CustomerQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OrderQuery) CollectFields(ctx context.Context, satisfies ...string) *OrderQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		o = o.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return o
}

func (o *OrderQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrderQuery {
	return o
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oi *OrderItemQuery) CollectFields(ctx context.Context, satisfies ...string) *OrderItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		oi = oi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return oi
}

func (oi *OrderItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrderItemQuery {
	return oi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProductQuery) CollectFields(ctx context.Context, satisfies ...string) *ProductQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProductQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProductQuery {
	return pr
}
